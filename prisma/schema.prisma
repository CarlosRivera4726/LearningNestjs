// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zip       String
  user      user?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user {
  id        String    @id @unique @default(cuid())
  email     String    @unique
  name      String
  lastName  String
  password  String
  roles     role?
  address   address?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  product[]
  orders    order[]
}

model role {
  id    String @id @default(cuid())
  name  String @unique @default("USUARIO")
  user user @relation(fields: [userId], references: [id])
  userId String @unique
}

model product {
  id          String     @id @default(cuid())
  name        String
  description String
  price       Float
  seller      user       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId    String
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  quantity    Float      @default(1)
  orders      order[]
  categories  category[]
}

model category {
  id       String    @id @default(cuid())
  name     String    @unique
  products product[]
}

model order {
  id         String    @id @default(cuid())
  products   product[]
  user       user      @relation(fields: [userId], references: [id])
  userId     String
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Invoice    invoice[]
}

model invoice {
  id        String   @id @default(cuid())
  order     order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
